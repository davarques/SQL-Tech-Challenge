USE sakila;

-- 1) List the number of films per category, grouped by category, ordered by number of films.

SELECT fc.category_id, COUNT(f.film_id) AS film_count
FROM film_category fc 
JOIN film f ON fc.film_id = f.film_id
GROUP BY fc.category_id
ORDER BY film_count DESC;

SELECT c.category_id, c.name, COUNT(f.film_id) AS film_count
FROM film_category fc
JOIN film f ON fc.film_id = f.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.category_id, c.name
ORDER BY film_count DESC;

-- 2) Retrieve the store ID, city, and country for each store (correcting relationships).

SELECT sta.store_id, ci.city, co.country
FROM staff sta
JOIN city ci USING (last_update)
JOIN country co ON co.last_update = sta.last_update;

-- 3) Calculate the total revenue generated by each store.

SELECT sta.store_id, SUM(pay.amount) AS total_revenue
FROM staff sta
JOIN payment pay USING (staff_id)
GROUP BY sta.store_id
ORDER BY total_revenue DESC;

-- 4) Determine the average running time of films for each category.

SELECT cat.category_id, cat.name, AVG(fi.length) AS avg_run_time
FROM category cat
JOIN film_category ficat USING (category_id)
JOIN film fi USING (film_id)
GROUP BY cat.category_id;

-- 5) Identify the film categories with the longest average running time, ordered by length.

SELECT cat.category_id, cat.name, AVG(fi.length) AS avg_run_time
FROM category cat
JOIN film_category ficat USING (category_id)
JOIN film fi USING (film_id)
GROUP BY cat.category_id
ORDER BY avg_run_time DESC;

-- 6) Retrieve the number of rentals per customer, grouped by customer, showing only those with more than 10 rentals.
SELECT c.customer_id, COUNT(r.rental_id) AS total_rentals
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
HAVING total_rentals > 10
ORDER BY total_rentals DESC;

-- 7) List the number of films rented per store, ordered by the highest rentals first.
SELECT i.store_id, COUNT(r.rental_id) AS rental_count
FROM inventory i
JOIN rental r USING (last_update)
GROUP BY i.store_id
ORDER BY rental_count DESC;

-- 8) Find the staff members and the total number of rentals they handled, grouped by staff and ordered by total rentals.

SELECT s.staff_id, s.first_name, s.last_name, COUNT(r.rental_id) AS total_rentals
FROM staff s
JOIN rental r USING (last_update)
GROUP BY s.staff_id
ORDER BY total_rentals DESC;

-- 9) Show the total revenue generated per customer, ordered by the highest spenders first.
SELECT customer_id, SUM(amount) AS total_spent
FROM payment 
GROUP BY customer_id
ORDER BY total_spent DESC
LIMIT 10;

-- 10) List the total payments made by customers in each city, grouped by city and ordered by total payments.

SELECT ci.city, SUM(pa.amount) AS total_spent
FROM city ci
JOIN address ad ON ci.city_id = ad.city_id
JOIN customer cu ON ad.address_id = cu.address_id
JOIN payment pa ON cu.customer_id = pa.customer_id
GROUP BY ci.city
ORDER BY total_spent DESC;

-- 11) Retrieve the average rental duration for each film category.

SELECT ca.category_id, ca.name, AVG(fi.rental_duration) avg_rental_duration
FROM category ca
JOIN film_category fica ON ca.category_id = fica.category_id
JOIN film fi ON fi.film_id = fica.film_id
GROUP BY ca.category_id
ORDER BY avg_rental_duration DESC;

-- 12) Find the number of active customers per store, grouped by store.

SELECT store_id, COUNT(customer_id) AS customer_count
FROM customer 
WHERE active = 1
GROUP BY store_id;

-- 13) List the films rented by each customer, grouped by customer and film, and show the count of rentals per film.

SELECT cu.customer_id, f.film_id, f.title, COUNT(re.rental_id) AS count_rented_films 
FROM customer cu
JOIN rental re ON cu.customer_id = re.customer_id
JOIN inventory i ON re.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY cu.customer_id, f.film_id
ORDER BY cu.customer_id, count_rented_films DESC;

-- 14) Show the staff member and the total amount of payments they processed, grouped by staff and ordered by amount.
SELECT s.staff_id, s.first_name, s.last_name, SUM(p.amount) AS total_pay_processed
FROM staff s
JOIN payment p USINg (staff_id)
GROUP BY s.staff_id
ORDER BY total_pay_processed DESC;





